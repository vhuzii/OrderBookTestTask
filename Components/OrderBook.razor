@rendermode InteractiveServer
@using Microsoft.AspNetCore.Http.Connections.Client
@using Microsoft.AspNetCore.SignalR.Client
@using OrderBookTestTask.Dtos
@using Radzen.Blazor
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>@TradingPair</PageTitle>

<h1>@TradingPair</h1>
@if (askCharts.Count == 0 || bidCharts.Count == 0)
{
    <p>Loading...</p>
}
else 
{
<div class="row">
    <div class="col-md-6">
        <RadzenChart>
            <RadzenColumnSeries Data="@bidCharts" CategoryProperty="Label" Title="Bids"
                LineType="LineType.Dashed" ValueProperty="Value" Fill="green" />
            <RadzenColumnOptions Radius="5" />
            <RadzenValueAxis Formatter="@formatValue">
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Amount" />
            </RadzenValueAxis>
        </RadzenChart>
    </div>
    <div class="col-md-6">
        <RadzenChart>
            <RadzenColumnSeries Data="@askCharts" CategoryProperty="Label" Title="Asks"
                LineType="LineType.Dashed" ValueProperty="Value" Fill="red" />
            <RadzenColumnOptions Radius="5" />
            <RadzenValueAxis Formatter="@formatValue">
                <RadzenGridLines Visible="true" />
            </RadzenValueAxis>
        </RadzenChart>
    </div>
</div>
}


@code {
    private HubConnection? _hubConnection;

    private List<ChartDto> askCharts = new();
    private List<ChartDto> bidCharts = new();

    [Parameter]
    public string? TradingPair { get; set; }


    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri(Constants.SignalR.HubUrls.OrderBookHub), configureHttpConnection)
            .Build();
            

        _hubConnection.On<string[][], string[][]>(Constants.SignalR.Methods.ReceiveOrderBook, (asks, bids) =>
        {   
            askCharts = asks.Select(ask => new ChartDto
            {
                Label = ask[0],
                Value = double.Parse(ask[1])
            })
            .ToList();
            bidCharts = bids.Select(bid => new ChartDto
            {
                Label = bid[0],
                Value = double.Parse(bid[1])
            })
            .Reverse()
            .ToList();
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
        await _hubConnection.InvokeAsync(Constants.SignalR.Methods.JoinRoom, TradingPair);
    }

    private static Action<HttpConnectionOptions> configureHttpConnection = (configureHttpConnection) =>
        configureHttpConnection.HttpMessageHandlerFactory = (message) =>
        {
            if (message is HttpClientHandler clientHandler)
                clientHandler.ServerCertificateCustomValidationCallback +=
                    (sender, certificate, chain, sslPolicyErrors) =>  true;
            return message;
        };

    private string formatValue(object value)
    {
        return Math.Round((double)value, 3).ToString();
    }
}