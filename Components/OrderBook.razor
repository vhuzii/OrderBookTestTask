@rendermode InteractiveServer
@using Microsoft.AspNetCore.Http.Connections.Client
@using Microsoft.AspNetCore.SignalR.Client
@using OrderBookTestTask.Dtos
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>@TradingPair</PageTitle>

<h1>@TradingPair</h1>
@if (_orderBook == null)
{
    <p>Loading...</p>
}
else
{
    <p>Asks: @_orderBook?.Data.Asks.Select(ask => ask[0]).First()</p>
}

@code {
    [Parameter]
    public string? TradingPair { get; set; }

    private HubConnection? _hubConnection;
    private OrderBookDto? _orderBook;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri(Constants.SignalR.HubUrls.OrderBookHub), configureHttpConnection)
            .Build();
            

        _hubConnection.On<OrderBookDto>(Constants.SignalR.Methods.ReceiveOrderBook, (orderBook) =>
        {   
            _orderBook = orderBook;
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
        await _hubConnection.InvokeAsync(Constants.SignalR.Methods.JoinRoom, TradingPair);
    }

    private static Action<HttpConnectionOptions> configureHttpConnection = (configureHttpConnection) =>
        configureHttpConnection.HttpMessageHandlerFactory = (message) =>
        {
            if (message is HttpClientHandler clientHandler)
                clientHandler.ServerCertificateCustomValidationCallback +=
                    (sender, certificate, chain, sslPolicyErrors) =>  true;
            return message;
        };

    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}