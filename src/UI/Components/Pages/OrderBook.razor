@page "/orderbook/{TradingPair}"
@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Http.Connections.Client
@using Microsoft.AspNetCore.SignalR.Client
@using OrderBookTestTask.Application.Constants.SignalR
@using OrderBookTestTask.Application.Dtos
@using Radzen
@using Radzen.Blazor
@using OrderBookTestTask.Application.Constants
@inject NavigationManager Navigation
@inject IHttpClientFactory ClientFactory
@implements IAsyncDisposable

<PageTitle>@TradingPair</PageTitle>

<h1>@TradingPair</h1>
@if (_chart is null)
{
    <p>Loading...</p>
}
else 
{
    <OrderBookCharts Chart="@_chart" />
    <div class="rz-p-12 rz-text-align-center">
        <RadzenLabel Text="Select Order Book Date and Time" Component="DatePickerWithTime" Style="margin-right: 8px; vertical-align: middle;" />
        <RadzenDatePicker @bind-Value=@_selectedDate ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" Name="DatePickerWithTime" />
        <RadzenButton Click=@(async args => await GetOrderbookByDate()) Text="Get Order Book" ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Button" />
    </div>
    @if (_displayFetchError)
    {
        <div class="rz-p-12 rz-text-align-center">
            <RadzenLabel Text="Error occurred while fetching data" Style="color: red;" />
        </div>
    }
    else @if (_selectedChart is not null)
    {
        @if (_selectedChartsTimeStamp is not null)
        {
            <div class="rz-p-12 rz-text-align-center">
                <RadzenLabel Text="Nearest chart " />
                <RadzenLabel Text="@_selectedChartsTimeStamp?.ToString()" Style="font-weight: bold;" />
            </div>
        }
        <OrderBookCharts Chart="@_selectedChart" />
    }
}


@code {
    private const int NumberOfElementsToDisplay = 15;


    private HubConnection? _hubConnection;

    private OrderBookChartDto? _chart;
    private OrderBookChartDto? _selectedChart;

    private DateTime? _selectedChartsTimeStamp;
    private DateTime? _selectedDate = DateTime.Now;

    private bool _displayFetchError = false;

    [Parameter]
    public string? TradingPair { get; set; }
    


    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        RedirectToTradingPairIfNotProvided();
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri(HubUrls.OrderBookHub))
            .Build();
            

        _hubConnection.On<string[][], string[][]>(Methods.ReceiveOrderBook, (asks, bids) =>
        {   
            var askCharts = asks.Select(ParseChart)
            .Take(NumberOfElementsToDisplay)
            .ToList();
            var bidCharts = bids.Select(ParseChart)
            .Take(NumberOfElementsToDisplay)
            .Reverse()
            .ToList();
            InvokeAsync(StateHasChanged);
            _chart = new OrderBookChartDto
            {
                AsksChart = askCharts,
                BidsChart = bidCharts
            };
        });

        await _hubConnection.StartAsync();
        await _hubConnection.InvokeAsync(Methods.JoinRoom, TradingPair);
    }

    private void RedirectToTradingPairIfNotProvided()
    {
        if (string.IsNullOrWhiteSpace(TradingPair))
        {
            var defaultRoute = $"/orderbook/btceur";
            Navigation.NavigateTo(defaultRoute);
        }
    }

    private ChartDto ParseChart(string[] chart)
    {
        return new ChartDto
        {
            Label = chart[0],
            Value = double.Parse(chart[1])
        };
    }

    private string FormatValue(object value)
    {
        return Math.Round((double)value, 3).ToString();
    }

    private async Task GetOrderbookByDate()
    {
        var client = ClientFactory.CreateClient("OrderBook");
        try 
        {
            var orderBook = await client.GetFromJsonAsync<OrderBookJsonResponseDto>("/order-book?tradingPair=" + 
            TradingPair + "&dateTime=" + _selectedDate?.ToString(Date.DateTimeRequestFormat));
            _selectedChart = new OrderBookChartDto
            {
                AsksChart = orderBook.Asks.Take(NumberOfElementsToDisplay).Select(ParseChart).ToList(),
                BidsChart = orderBook.Bids.Take(NumberOfElementsToDisplay).Select(ParseChart).ToList()
            };
            await InvokeAsync(StateHasChanged);
            _displayFetchError = false;
            _selectedChartsTimeStamp = orderBook.TimeStamp;
        } 
        catch (Exception)
        {
            _displayFetchError = true;
        }
    }
}